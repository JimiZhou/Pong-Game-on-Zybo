/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
//#include "xil_printf.h"


#define PONG_VGA_POS_BALL 0x40000000
#define PONG_VGA_Y_PADDLE 0x40000004
#define PONG_VGA_SYNC 0x40000008

#define score_position_addr 0x4000000C
#define score_number_addr 0x40000010

#define GPIO_BTN_ADDR 0x41210000
#define GPIO_LED_ADDR 0x41220000

#define BOUND_THICK 10
#define PADDLE_WID 20
#define PADDLE_LEN 100
#define pixels_y 600
#define pixels_x 800
#define ball_size 32

#define UP 1
#define DOWN 0
#define LEFT 1
#define RIGHT 0

#define DEBOUNCE_TIME 400


#define X_BALL_INIT 400
#define Y_BALL_INIT 300
#define PADDLE_INIT 265
#define BALL_SPEED_INIT 2000
#define BALL_SPEED_MAX 1000
#define PADDLE_SPEED_INIT 800

int main()
{
  	uint16_t X_BALL = 100;
	uint16_t Y_BALL = 200;
	uint16_t Y_PADDLE_RIGHT,Y_PADDLE_LEFT;
	uint32_t POS_BALL;
	uint32_t Y_PADDLE;

	uint U_D = UP;
	uint L_R = RIGHT;

	// Initialize the idle paddle position
	Y_PADDLE_RIGHT = Y_PADDLE_LEFT =  265; //0.5*(pixels_y-PADDLE_LEN);
	// Define gpio memory
	uint32_t * pong_vga_sync = (uint32_t *) PONG_VGA_SYNC;
	uint32_t * pong_vga_pos_ball = (uint32_t *) PONG_VGA_POS_BALL;
	uint32_t * pong_vga_y_paddle = (uint32_t *) PONG_VGA_Y_PADDLE;
	uint32_t * gpiobtn = (uint32_t *) GPIO_BTN_ADDR;
	uint32_t * gpioleds = (uint32_t *) GPIO_LED_ADDR;

//	uint32_t * title_position = (uint32_t *) title_position_addr;
//	uint32_t * title_content = (uint32_t *) title_content_addr;
//	uint32_t * name_content = (uint32_t *) name_content_addr;
//	uint32_t * name_position = (uint32_t *) name_position_addr;

	uint32_t * score_position = (uint32_t *) score_position_addr;
	uint32_t * score_number = (uint32_t *) score_number_addr;


	uint32_t NUM_SCORE;
	uint32_t POS_SCORE;

	uint16_t score_number_left = 208;
	uint16_t score_number_right = 208;

	uint16_t score_left_x = 330;
	uint16_t score_right_x = 405;

	//
	uint32_t * debouncer1 = 0;
	uint32_t * debouncer2 = 0;
	uint32_t * debouncer3 = 0;

	unsigned char button1 = 0;
	unsigned char button2 = 0;
	unsigned char button3 = 0;

	//
	uint ball_speed = BALL_SPEED_INIT;
	uint paddle_speed = PADDLE_SPEED_INIT;

	//
	uint refresh_ball = 0;
	uint refresh_paddle = 0;

	// Initialize the platform
    init_platform();

    // Configure I/O
    gpiobtn[1] = 0b1111;
    gpioleds[1] = 0b0000;

    //print("Hello World\n\r");

    while(1){

    	// Detect button push
    	if(gpiobtn[0] & 0b0001)
    	{
    		if(debouncer1 > 0)
    			debouncer1--;
    	}
    	else if(debouncer1 < DEBOUNCE_TIME)
    		debouncer1++;
    	if(debouncer1 == 0)
    		button1 = 1;
    	else if(debouncer1 >= DEBOUNCE_TIME)
    	{
    		button1 = 0;
    		debouncer1 = DEBOUNCE_TIME;
    	}

    	if(gpiobtn[0] & 0b0010)
    	    	{
    	    		if(debouncer2 > 0)
    	    			debouncer2--;
    	    	}
    	    	else if(debouncer2 < DEBOUNCE_TIME)
    	    		debouncer2++;
    	    	if(debouncer2 == 0)
    	    		button2 = 1;
    	    	else if(debouncer2 >= DEBOUNCE_TIME)
    	    	{
    	    		button2 = 0;
    	    		debouncer2 = DEBOUNCE_TIME;
    	    	}

    	    	if(gpiobtn[0] & 0b0100)
    	    	    	    	{
    	    	    	    		if(debouncer3 > 0)
    	    	    	    			debouncer3--;
    	    	    	    	}
    	    	    	    	else if(debouncer3 < DEBOUNCE_TIME)
    	    	    	    		debouncer3++;
    	    	    	    	if(debouncer3 == 0)
    	    	    	    		button3 = 1;
    	    	    	    	else if(debouncer3 >= DEBOUNCE_TIME)
    	    	    	    	{
    	    	    	    		button3 = 0;
    	    	    	    		debouncer3 = DEBOUNCE_TIME;
    	    	    	    	}

    	// Generate output
    	if(*pong_vga_sync & 0x1)
    	{
    		refresh_ball ++;
    		refresh_paddle++;
    	}


    	if(refresh_paddle == paddle_speed)
    	{
    		// Move left paddle
    		    		if (button1 == 1)
    		    		    	         {
    		    		    	                //the button1 is ON
    		    		    	        	 gpioleds[0] = 0b0001;
    		    		    	        	 if(Y_PADDLE_LEFT < pixels_y - 2 * BOUND_THICK - PADDLE_LEN)
    		    		    	        	 {
    		    		    	        		 Y_PADDLE_LEFT ++;
    		    		    	        	 }
    		    		    	         }
    		    		    	         else
    		    		    	         {
    		    		    	                //the button1 is OFF
    		    		    	        	 gpioleds[0] = 0b0000;
    		    		    	         }



    		    		    	         if (button2 == 1)
    		    		    	                  {
    		    		    	                         //the button is ON
    		    		    	        	 	 	 gpioleds[0] = 0b0010;

    		    		    	        	     		if(Y_PADDLE_LEFT > 0)
    		    		    	        	     		{
    		    		    	        	     			Y_PADDLE_LEFT --;
    		    		    	        	     		}
    		    		    	                  }
    		    		    	                  else
    		    		    	                  {
    		    		    	                         //the button is OFF
    		    		    	                	  gpioleds[0] = 0b0000;
    		    		    	                  }
    		    		    	         refresh_paddle = 0;
    	}



    	if(refresh_ball == ball_speed)
    	{
    		if(L_R == LEFT && X_BALL == 0)
    		{
    			// You lose
    			X_BALL = X_BALL_INIT;
    			Y_BALL = Y_BALL_INIT;
    			ball_speed = BALL_SPEED_INIT;
    			score_number_left = score_number_left + 8;
    		}
    		if(L_R == RIGHT && X_BALL == pixels_x - ball_size && Y_BALL >= Y_PADDLE_RIGHT && Y_BALL <= Y_PADDLE_RIGHT + PADDLE_LEN)
    		{
    			// AI lose
    			X_BALL = X_BALL_INIT;
    			Y_BALL = Y_BALL_INIT;
    			score_number_right = score_number_right + 8;
    		}
    		if(L_R == LEFT && X_BALL == PADDLE_WID && Y_BALL > Y_PADDLE_LEFT - BOUND_THICK  && Y_BALL < Y_PADDLE_LEFT - BOUND_THICK + PADDLE_LEN + ball_size)
    		{
    			// You caught the ball with paddle
    			L_R = RIGHT;
    			//if(ball_speed<1000) ball_speed = BALL_SPEED_MAX;
    		    //else ball_speed -= 800;
    		}
    		if(L_R == RIGHT && X_BALL == pixels_x - ball_size - PADDLE_WID && Y_BALL > Y_PADDLE_RIGHT - BOUND_THICK && Y_BALL < Y_PADDLE_RIGHT - BOUND_THICK + PADDLE_LEN + ball_size)
    		    		{
    		    			// AI caught the ball with paddle
    		    			L_R = LEFT;

      		    			//if(ball_speed<1000) ball_speed = BALL_SPEED_MAX;
    		    			//else ball_speed -= 500;
    		    		}

    		    		if(L_R == LEFT)
    		    		{
    		    			X_BALL--;
    		    		}else if(L_R == RIGHT)
    		    		{
    		    			X_BALL++;
    		    		}

    		 if(U_D == UP && Y_BALL == 0)
    		 {
    			 U_D = DOWN;
    		 }
    		 if(U_D == DOWN && Y_BALL == pixels_y - ball_size - 2*BOUND_THICK)
    		 {
    			 U_D = UP;
    		 }

    		 if(U_D == UP)
    		 {
    			 Y_BALL--;
    		 }else if(U_D == DOWN)
    		 {
    			 Y_BALL++;
    		 }

    		 POS_BALL = (uint32_t) Y_BALL << 16 | X_BALL;
    		 *pong_vga_pos_ball = POS_BALL;
    		 Y_PADDLE_RIGHT = Y_BALL;
    		 if(Y_PADDLE_RIGHT>pixels_y - 2*BOUND_THICK - PADDLE_LEN)Y_PADDLE_RIGHT = pixels_y - BOUND_THICK -PADDLE_LEN;
    		 Y_PADDLE = (uint32_t) Y_PADDLE_RIGHT << 16 | Y_PADDLE_LEFT;
    		 *pong_vga_y_paddle = Y_PADDLE;




    		 			POS_SCORE = (uint32_t) score_right_x << 16 | score_left_x;
    		 			*score_position = POS_SCORE;



    		 			if(score_number_left >280 || score_number_right >280)
    		 			{
    		 					score_number_right = score_number_left = 48;
    		 					X_BALL = 400;
    		 					Y_BALL = 300;
    		 					POS_BALL = (uint32_t) Y_BALL << 16 | X_BALL;
    		 					    		 *pong_vga_pos_ball = POS_BALL;
    		 					    		 Y_PADDLE_RIGHT = Y_BALL;

    		 					NUM_SCORE = (uint32_t) score_number_right << 16 | score_number_left;
    		 					*score_number = NUM_SCORE;
    		 					if(button3 == 1)
    		 					{
    		 						score_number_right = score_number_left = 208;
    		 						continue;
    		 					}
    		 			}

    		 					NUM_SCORE = (uint32_t) score_number_right << 16 | score_number_left;
    		 					*score_number = NUM_SCORE;




    		 refresh_ball = 0;
    	}
    }

    cleanup_platform();
    return 0;
}
